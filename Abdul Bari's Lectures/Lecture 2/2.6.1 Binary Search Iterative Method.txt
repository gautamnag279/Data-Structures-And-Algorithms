- Binary search can only be performed if the array is in sorted order
- Time complexity is O(logN)

Algorithm:
    > Initialize 3 variables: low, mid, high
        ~ low points at the start of the array
        ~ mid points at the middle of the array
        ~ high points at the end of the array
    > Check the value at arr[mid]
        ~ if target < arr[mid] : perform binary search only on the left side of the array
        ~ if target > arr[mid] : perform binary search only on the right side of the array
        ~ if target = arr[mid] : return as answer
    > Keep performing binary search until the element is found

Implementation:

def BinarySearch(arr, size, target):
    low = 0
    high = size - 1

    while low <= high:
        mid = math.floor((low + high)/2)
        if target == arr[mid]:
            return mid
        if target < arr[mid]:
            high = mid - 1
        else:
            low = mid + 1
    return "Not found"